diff --git a/include/bios_disk.h b/include/bios_disk.h
index 444a902..8234f5a 100644
--- a/include/bios_disk.h
+++ b/include/bios_disk.h
@@ -29,6 +29,7 @@
 #ifndef DOSBOX_BIOS_H
 #include "bios.h"
 #endif
+#include <cstdlib>
 
 /* The Section handling Bios Disk Access */
 #define BIOS_MAX_DISK 10
diff --git a/src/cpu/core_dyn_x86.cpp b/src/cpu/core_dyn_x86.cpp
index ce420d4..1b38409 100644
--- a/src/cpu/core_dyn_x86.cpp
+++ b/src/cpu/core_dyn_x86.cpp
@@ -537,11 +537,11 @@ void CPU_Core_Dyn_X86_RestoreDHFPUState(void) {
 }
 
 #else
-
+#endif
 void CPU_Core_Dyn_X86_SaveDHFPUState(void) {
 }
 
 void CPU_Core_Dyn_X86_RestoreDHFPUState(void) {
 }
 
-#endif
+//#endif
diff --git a/src/cpu/cpu.cpp b/src/cpu/cpu.cpp
index 4fd04f2..9efe466 100644
--- a/src/cpu/cpu.cpp
+++ b/src/cpu/cpu.cpp
@@ -153,6 +153,7 @@ void CPU_Core_Dyn_X86_Cache_Reset(void);
 void CPU_Core_Dynrec_Init(void);
 void CPU_Core_Dynrec_Cache_Init(bool enable_cache);
 void CPU_Core_Dynrec_Cache_Close(void);
+void CPU_Core_Dyn_X86_SaveDHFPUState(void);
 #endif
 
 /* called to signal an NMI. */
diff --git a/src/gui/sdlmain.cpp b/src/gui/sdlmain.cpp
index a0e601a..04412ad 100644
--- a/src/gui/sdlmain.cpp
+++ b/src/gui/sdlmain.cpp
@@ -1305,12 +1305,12 @@ static void opengl_init(void) {
 	glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glUnmapBufferARB");
 	const char * gl_ext = (const char *)glGetString (GL_EXTENSIONS);
 	if(gl_ext && *gl_ext){
-		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") > 0);
-		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") > 0);
+		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") != NULL);
+		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") != NULL);
 		if (!control->cmdline->FindExist("-disable_vga_comp"))
 			sdl.opengl.pixel_buffer_object=false;
 		else
-			sdl.opengl.pixel_buffer_object=(strstr(gl_ext,"GL_ARB_pixel_buffer_object") >0 ) &&
+			sdl.opengl.pixel_buffer_object=(strstr(gl_ext,"GL_ARB_pixel_buffer_object") != NULL ) &&
 		    	glGenBuffersARB && glBindBufferARB && glDeleteBuffersARB && glBufferDataARB &&
 		    	glMapBufferARB && glUnmapBufferARB;
   	} else {
@@ -2377,12 +2377,12 @@ static void GUI_StartUp(Section * sec) {
 	glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)SDL_GL_GetProcAddress("glUnmapBufferARB");
 	const char * gl_ext = (const char *)glGetString (GL_EXTENSIONS);
 	if(gl_ext && *gl_ext){
-		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") > 0);
-		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") > 0);
+		sdl.opengl.packed_pixel=(strstr(gl_ext,"EXT_packed_pixels") != NULL);
+		sdl.opengl.paletted_texture=(strstr(gl_ext,"EXT_paletted_texture") != NULL);
 		if (!control->cmdline->FindExist("-disable_vga_comp"))
 			sdl.opengl.pixel_buffer_object=false;
 		else
-			sdl.opengl.pixel_buffer_object=(strstr(gl_ext,"GL_ARB_pixel_buffer_object") >0 ) &&
+			sdl.opengl.pixel_buffer_object=(strstr(gl_ext,"GL_ARB_pixel_buffer_object") != NULL ) &&
 		    	glGenBuffersARB && glBindBufferARB && glDeleteBuffersARB && glBufferDataARB &&
 		    	glMapBufferARB && glUnmapBufferARB;
     	} else {
diff --git a/src/gui/xBRZ/xbrz.cpp b/src/gui/xBRZ/xbrz.cpp
index f6ac30e..0f5bd53 100644
--- a/src/gui/xBRZ/xbrz.cpp
+++ b/src/gui/xBRZ/xbrz.cpp
@@ -14,6 +14,7 @@
 // ****************************************************************************
 
 #include "xbrz.h"
+#include <cmath>
 #include <cassert>
 #include <algorithm>
 #include <vector>
diff --git a/src/hardware/ide.cpp b/src/hardware/ide.cpp
index b02d02b..3892c0b 100644
--- a/src/hardware/ide.cpp
+++ b/src/hardware/ide.cpp
@@ -8,6 +8,7 @@
 /* $Id: ide.cpp,v 1.49 2009-04-10 09:53:04 c2woody Exp $ */
 
 #include <math.h>
+#include <algorithm>
 #include <assert.h>
 #include "dosbox.h"
 #include "inout.h"
@@ -22,7 +23,7 @@
 #include "bios_disk.h"
 #include "../src/dos/cdrom.h"
 
-#ifdef _MSC_VER
+#ifndef _MSC_VER
 # define MIN(a,b) ((a) < (b) ? (a) : (b))
 #else
 # define MIN(a,b) std::min(a,b)
diff --git a/src/hardware/serialport/nullmodem.cpp b/src/hardware/serialport/nullmodem.cpp
index 2865073..45879d7 100644
--- a/src/hardware/serialport/nullmodem.cpp
+++ b/src/hardware/serialport/nullmodem.cpp
@@ -148,7 +148,7 @@ CNullModem::CNullModem(Bitu id, CommandLine* cmd):CSerial (id, cmd) {
 	setCTS(dtrrespect||transparent);
 	setDSR(dtrrespect||transparent);
 	setRI(false);
-	setCD(clientsocket > 0); // CD on if connection established
+	setCD(clientsocket != NULL); // CD on if connection established
 }
 
 CNullModem::~CNullModem() {
diff --git a/src/hardware/voodoo_emu.cpp b/src/hardware/voodoo_emu.cpp
index b1af226..410e314 100644
--- a/src/hardware/voodoo_emu.cpp
+++ b/src/hardware/voodoo_emu.cpp
@@ -1554,12 +1554,12 @@ void register_w(UINT32 offset, UINT32 data) {
 		case sARGB:
 			if (chips & 1)
 			{
-				CPU_Core_Dyn_X86_SaveDHFPUState();
+				//CPU_Core_Dyn_X86_SaveDHFPUState();
 				v->reg[sAlpha].f = (float)RGB_ALPHA(data);
 				v->reg[sRed].f = (float)RGB_RED(data);
 				v->reg[sGreen].f = (float)RGB_GREEN(data);
 				v->reg[sBlue].f = (float)RGB_BLUE(data);
-				CPU_Core_Dyn_X86_RestoreDHFPUState();
+				//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			}
 			break;
 
@@ -1576,9 +1576,9 @@ void register_w(UINT32 offset, UINT32 data) {
 			if (chips & 1) {
 				if (v->ogl && v->active && (FBZMODE_Y_ORIGIN(v->reg[fbzMode].u)!=FBZMODE_Y_ORIGIN(data))) {
 					v->reg[fbzMode].u = data;
-					CPU_Core_Dyn_X86_SaveDHFPUState();
+					//CPU_Core_Dyn_X86_SaveDHFPUState();
 					voodoo_ogl_set_window(v);
-					CPU_Core_Dyn_X86_RestoreDHFPUState();
+					//CPU_Core_Dyn_X86_RestoreDHFPUState();
 				} else {
 					v->reg[fbzMode].u = data;
 				}
@@ -1593,29 +1593,29 @@ void register_w(UINT32 offset, UINT32 data) {
 
 		/* triangle drawing */
 		case triangleCMD:
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 			triangle(v);
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		case ftriangleCMD:
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 			triangle(v);
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		case sBeginTriCMD:
 //			E_Exit("begin tri");
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 			begin_triangle(v);
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		case sDrawTriCMD:
 //			E_Exit("draw tri");
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 			draw_triangle(v);
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		/* other commands */
@@ -1627,9 +1627,9 @@ void register_w(UINT32 offset, UINT32 data) {
 			break;
 
 		case fastfillCMD:
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 			fastfill(v);
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		case swapbufferCMD:
@@ -1676,7 +1676,7 @@ void register_w(UINT32 offset, UINT32 data) {
 				v->reg[regnum].u = data;
 				if (v->reg[hSync].u != 0 && v->reg[vSync].u != 0 && v->reg[videoDimensions].u != 0)
 				{
-					CPU_Core_Dyn_X86_SaveDHFPUState();
+					//CPU_Core_Dyn_X86_SaveDHFPUState();
 					int htotal = ((v->reg[hSync].u >> 16) & 0x3ff) + 1 + (v->reg[hSync].u & 0xff) + 1;
 					int vtotal = ((v->reg[vSync].u >> 16) & 0xfff) + (v->reg[vSync].u & 0xfff);
 					int hvis = v->reg[videoDimensions].u & 0x3ff;
@@ -1753,7 +1753,7 @@ void register_w(UINT32 offset, UINT32 data) {
 						recompute_video_memory(v);
 
 					Voodoo_UpdateScreenStart();
-					CPU_Core_Dyn_X86_RestoreDHFPUState();
+					//CPU_Core_Dyn_X86_RestoreDHFPUState();
 				}
 			}
 			break;
@@ -1762,13 +1762,13 @@ void register_w(UINT32 offset, UINT32 data) {
 		case fbiInit0:
 			if ((chips & 1) && INITEN_ENABLE_HW_INIT(v->pci.init_enable))
 			{
-				CPU_Core_Dyn_X86_SaveDHFPUState();
+				//CPU_Core_Dyn_X86_SaveDHFPUState();
 				Voodoo_Output_Enable(FBIINIT0_VGA_PASSTHRU(data));
 				v->reg[fbiInit0].u = data;
 				if (FBIINIT0_GRAPHICS_RESET(data))
 					soft_reset(v);
 				recompute_video_memory(v);
-				CPU_Core_Dyn_X86_RestoreDHFPUState();
+				//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			}
 			break;
 
@@ -1907,9 +1907,9 @@ void register_w(UINT32 offset, UINT32 data) {
 		case clipLeftRight:
 			if (chips & 1) v->reg[0x000 + regnum].u = data;
 			if (v->ogl) {
-				CPU_Core_Dyn_X86_SaveDHFPUState();
+				//CPU_Core_Dyn_X86_SaveDHFPUState();
 				voodoo_ogl_clip_window(v);
-				CPU_Core_Dyn_X86_RestoreDHFPUState();
+				//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			}
 			break;
 
@@ -2702,7 +2702,7 @@ UINT32 register_r(UINT32 offset)
 	switch (regnum)
 	{
 		case status:
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 
 			/* start with a blank slate */
 			result = 0;
@@ -2738,7 +2738,7 @@ UINT32 register_r(UINT32 offset)
 
 			/* bit 31 is not used */
 
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 
 			break;
 
@@ -2746,7 +2746,7 @@ UINT32 register_r(UINT32 offset)
 			if (v->type < VOODOO_2)
 				break;
 
-			CPU_Core_Dyn_X86_SaveDHFPUState();
+			//CPU_Core_Dyn_X86_SaveDHFPUState();
 
 			/* start with a blank slate */
 			result = 0;
@@ -2754,7 +2754,7 @@ UINT32 register_r(UINT32 offset)
 			result |= ((Bit32u)(Voodoo_GetVRetracePosition() * 0x1fff)) & 0x1fff;
 			result |= (((Bit32u)(Voodoo_GetHRetracePosition() * 0x7ff)) & 0x7ff) << 16;
 
-			CPU_Core_Dyn_X86_RestoreDHFPUState();
+			//CPU_Core_Dyn_X86_RestoreDHFPUState();
 			break;
 
 		/* bit 2 of the initEnable register maps this to dacRead */
diff --git a/src/hardware/voodoo_interface.cpp b/src/hardware/voodoo_interface.cpp
index 60bb354..bec2b8d 100644
--- a/src/hardware/voodoo_interface.cpp
+++ b/src/hardware/voodoo_interface.cpp
@@ -303,9 +303,9 @@ void Voodoo_PCI_InitEnable(Bitu val) {
 
 void Voodoo_PCI_Enable(bool enable) {
 	v->clock_enabled = enable;
-	CPU_Core_Dyn_X86_SaveDHFPUState();
+	//CPU_Core_Dyn_X86_SaveDHFPUState();
 	Voodoo_UpdateScreenStart();
-	CPU_Core_Dyn_X86_RestoreDHFPUState();
+	//CPU_Core_Dyn_X86_RestoreDHFPUState();
 }
 
 PageHandler* Voodoo_GetPageHandler() {
